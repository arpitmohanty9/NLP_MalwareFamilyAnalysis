title,body
WannaCry Malware Profile,"WannaCry (also known as WCry or WanaCryptor) malware is a self-propagating (worm-like) ransomware that spreads through internal networks and over the public internet by exploiting a vulnerability in Microsoft’s Server Message Block (SMB) protocol, MS17-010. The WannaCry malware consists of two distinct components, one that provides ransomware functionality and a component used for propagation, which contains functionality to enable SMB exploitation capabilities. The malware leverages an exploit, codenamed “EternalBlue”, that was released by the Shadow Brokers on April 14, 2017. The malware appends encrypted data files with the .WCRY extension, drops and executes a decryptor tool, and demands $300 or $600 USD (via Bitcoin) to decrypt the data. The malware uses encrypted Tor channels for command and control (C2) communications. Filename MD5 Hash Size (bytes) Compile Time Description Filetype mssecsvc.exe db349b97c37d22f5ea1d1841e3c89eb4 3723264 2010-11-20T09:03:08Z Loader + Worm Component EXE tasksche.exe 84c82835a5d21bbcf75a61706d8ab549 3514368 2010-11-20T09:05:05Z Loader EXE Unavailable f351e1fcca0c4ea05fc44d15a17f8b36 65536 2009-07-14 01:12:55Z Encryptor DLL @WanaDecryptor@.exe 7bf2b57f2a205768755c07f238fb32cc 245760 2009-07-13 23:19:35Z Decryptor EXE Table 1: File characteristics The malware creates the following two registry run keys to ensure persistence: Value: <Full_path>\tasksche.exe Value: <Full_path>\tasksche.exe The malware creates the following service to ensure persistence of mssecsvc.exe: The malware creates the following service to ensure persistence of tasksche.exe Loader Files Encryptor Files Decryptor Files The following artifact can be found on remotely exploited systems: The malware starts by attempting to connect to the following domain with InternetOpenUrl: NOTE: If this succeeds, the malware immediately exits. For a list of observed killswitch domains, see Appendix A. If the connection fails, however, the malware checks the number of arguments passed to the program. If zero, the malware continues with installation; otherwise it enters service mode. Note: Network proxies and other enterprise network security features may prevent the malware from contacting its killswitch domain and inadvertently trigger encryption. Organizations may wish to adjust their proxy configurations or other network configurations to avoid this problem. In service mode, the malware first updates the service config so that failure actions occur if the service exits without entering a SERVICE_STOPPED state. The malware then executes the service function, which registers the service handlers and attempts exploitation of MS17-010 against identified SMB services. This allows remote code execution and enables spreading across the network. This execution is performed in a thread, and the service exits after 24 hours regardless of the status of the thread. The spreader begins by setting up the Windows socket APIs and generating a RSA crypto context. This crypto context is later used to generate random numbers. The malware then builds two DLLs in memory – they are 32 and 64-bit DLLs that have identical functionality. Each one contains a single export named PlayGame that loads the W resource, writes it to C:\WINDOWS\mssecsvc.exe, and executes it. The W resource in each case has been populated with a copy of the running binary (MD5: db349b97c37d22f5ea1d1841e3c89eb4). The malware continues by spawning two threads, the first thread enumerates the network adapters and determines which subnets the system is on. The malware then generates a thread for each IP on the subnet. Each of these threads attempts to connect to the IP on port 445 and, if successful, attempts exploitation of the service via a vulnerability described in MS17-010. An example of an attempt to exploit MS17-010 on a remote system can be seen in Figure 1. Figure 1: WannaCry network traffic attempting SMB exploit One of the unique features of this traffic is an SMB Tree Connect AndX Request containing the following UNICODE string:   This packet is hand-crafted and hard-coded into the malware. The second thread generates random IPs and attempts to connect to them on port 445. If the connection is successful, the malware then attempts to perform the SMB attack on the system. 128 instances of the second thread area created with two seconds separating each thread creations. The malware continues by creating a service named mssecsvc2.0 with a binary path pointing to the running module with the arguments ""-m security"". Once created, the malware starts the service. The malware then locates its R resource and loads it into memory. The malware then writes the R resource data to the file C:\WINDOWS\tasksche.exe. The malware executes C:\WINDOWS\tasksche.exe /i with the CreateProcess API. The malware then attempts to move C:\WINDOWS\tasksche.exe to C:\WINDOWS\qeriuwjhrf, replacing the original file if it exists. The malware begins by generating a unique identifier based on the computer name. The identifier, <sys_id>, has the form of 8-15 random lowercase characters followed by 3 numbers. The malware then checks to see if it was passed the /i argument. The /i command copies the running binary to <system_drive>\ProgamData\<sys_id>\tasksche.exe if <system_drive>\ProgamData exists, otherwise it will be copied to <system_drive>\Intel\<sys_id>\tasksche.exe. <system_drive>is the drive letter on which Windows was installed (C:\ for C:\Windows). The malware then updates its current directory to the created directory. The malware then attempts to open the service named <sys_id>. If it does not exist, the malware creates it with a DisplayName of <sys_id> and a BinaryPath of cmd /c <path_to_copied tasksche.exe>. The malware then starts the service. The malware attempts to open the mutex Global\MsWinZonesCacheCounterMutexA0. If the mutex is not created within 60 seconds, the malware re-lauches itself from the new installation directory with no arguments. The malware then waits 60 seconds for the mutex to be created. If the mutex is created in either instance, the initial executable exits. If the mutex fails to be created, the malware continues as if it was run without the /i argument. The malware updates %CD% to the path of the running module and sets HKLM\Software\WanaCrypt0r\wd to %CD%. The malware then loads the XIA resource and decompresses numerous files (see Table 3) to %CD%. The malware then opens %CD%\c.wnry (the configuration data) and loads it into memory. It expects the file to be of size 0x30C. The malware then chooses randomly between the three strings 13AM4VW2dhxYgXeQepoHkHSQuy6NgaEb94, 12t9YDPgwueZ9NyMgw519p7AA8isjr6SMw, and 115p7UMMngoj1pMvkpHijcRdfJNXj6LrLn; writes it to offset 0xB2 in the configuration file; and writes the updated configuration data back to %CD%\c.wnry. The malware then sets the hidden attribute for %CD% by executing the following command with CreateProcess: The malware then executes the following command – granting all users permissions to %CD% and all of its subdirectories: The malware then imports the hard-coded RSA Private key, shown in Figure 2.  Figure 2: Imported private key The malware then opens and reads %CD%\t.wnry. The first 8 bytes of the file are checked to match the magic value WANACRY!. The file has the following structure:  The encrypted key decrypts to the 128-bit AES key BEE19B98D2E5B12211CE211EECB13DE6. This key can then be used to decrypt the enc_data. The decrypted data is saved as a DLL (MD5: f351e1fcca0c4ea05fc44d15a17f8b36). This DLL is then manually loaded into memory and the TaskStart export is called. The TaskStart export of the decrypted DLL is the encryption component of the ransomware. The files shown in Table 2 are extracted from the XIA resource. They are dropped into the %CD% of the running malware. Filename MD5 Hash Description r.wnry 3e0020fc529b1c2a061016dd2469ba96 Text ransom note s.wnry ad4c9de7c8c40813f200ba1c2fa33083 Zip file containing Tor files t.wnry 5dcaac857e695a65f5c3ef1441a73a8f Encrypted encryption tool taskdl.exe 4fef5e34143e646dbf9907c4374276f5 *.WNCRYT file deletion tool taskse.exe 8495400f199ac77853c53b5a3f278f3e Utility used to launch decryption tool u.wnry 7bf2b57f2a205768755c07f238fb32cc Decryption tool b.wnry c17170262312f3be7027bc2ca825bf0c Ransom image (BMP) c.wnry ae08f79a0d800b82fcbe1b43cdbdbefc Configuration data Table 2: XIA extracted resources Table 3 shows RTF documents containing the ransom note in various languages. Filename MD5 Hash m_bulgarian.wnry 95673b0f968c0f55b32204361940d184 m_chinese (simplified).wnry 0252d45ca21c8e43c9742285c48e91ad m_chinese (traditional).wnry 2efc3690d67cd073a9406a25005f7cea m_croatian.wnry 17194003fa70ce477326ce2f6deeb270 m_czech.wnry 537efeecdfa94cc421e58fd82a58ba9e m_danish.wnry 2c5a3b81d5c4715b7bea01033367fcb5 m_dutch.wnry 7a8d499407c6a647c03c4471a67eaad7 m_english.wnry fe68c2dc0d2419b38f44d83f2fcf232e m_filipino.wnry 08b9e69b57e4c9b966664f8e1c27ab09 m_finnish.wnry 35c2f97eea8819b1caebd23fee732d8f m_french.wnry 4e57113a6bf6b88fdd32782a4a381274 m_german.wnry 3d59bbb5553fe03a89f817819540f469 m_greek.wnry fb4e8718fea95bb7479727fde80cb424 m_indonesian.wnry 3788f91c694dfc48e12417ce93356b0f m_italian.wnry 30a200f78498990095b36f574b6e8690 m_japanese.wnry b77e1221f7ecd0b5d696cb66cda1609e m_korean.wnry 6735cb43fe44832b061eeb3f5956b099 m_latvian.wnry c33afb4ecc04ee1bcc6975bea49abe40 m_norwegian.wnry ff70cc7c00951084175d12128ce02399 m_polish.wnry e79d7f2833a9c2e2553c7fe04a1b63f4 m_portuguese.wnry fa948f7d8dfb21ceddd6794f2d56b44f m_romanian.wnry 313e0ececd24f4fa1504118a11bc7986 m_russian.wnry 452615db2336d60af7e2057481e4cab5 m_slovak.wnry c911aba4ab1da6c28cf86338ab2ab6cc m_spanish.wnry 8d61648d34cba8ae9d1e2a219019add1 m_swedish.wnry c7a19984eb9f37198652eaf2fd1ee25c m_turkish.wnry 531ba6b1a5460fc9446946f91cc8c94b m_vietnamese.wnry 8419be28a0dcec3f55823620922b00fa Table 3: Ransom notes in various languages The TaskStart export takes two arguments; the handle to the module and an integer that must be zero. TaskStart first creates a mutex named ""MsWinZonesCacheCounterMutexA"" and reads the contents of c.wnry from the current directory. If the mutex exists or c.wnry is not present, the malware exits. The malware creates another mutex named ""Global\MsWinZonesCacheCounterMutexA0"". The malware then loads and verifies a key from the file 00000000.dky. The malware then attempts to load a key 00000000.pky. If the key does not exist, the malware imports a public RSA key (seen in Figure 3), generates a new 2048-bit RSA key and saves the public key to 00000000.pky. The malware then saves the generated private key to 00000000.eky, encrypted with the embedded public key.  Figure 3: Public RSA key The 00000000.eky starts with the number of bytes in little endian (0x500) followed by the encrypted key. The malware launches a thread that writes 136 bytes to 00000000.res every 25 seconds. The buffer written includes the current time of the system. If the file 00000000.res does not exist while the malware is initializing, it creates the file. The initial contents begins with eight randomly generated bytes followed by 128 zero bytes. The malware launches another thread that verifies it can encrypt and decrypt using the keys contained in 00000000.dky and 00000000.pky every 25 seconds. If the decryption is successful, the malware sets a global flag that stops the encryption process. The malware launches another thread that scans for new drives attached to the system every three seconds. If a new drive is attached to the system and is not identified as a type CDROM drive, the malware begins the encryption process on the new drive. On new drives attached to the system, the malware may create the directory <Drive_letter>:\$RECYCLE and execute the following command: The malware creates a thread that executes the process taskdl.exe every 30 seconds. and creates another thread that executes either of the following two binaries (depending on administrator permissions and if the malware is running at system level): A registry key name starting with 8 to 15 characters between 'a' and 'z' followed by three random values between '0' and '9' is then generated by the malware. It may then create the following registry paths with the generated key name: To create the registry key, the malware executes the following command: The malware loads another embedded RSA public key shown in Figure 4.  Figure 4: Additional embedded RSA public key The malware executes the file @WanaDecryptor@.exe with the argument ""fi"". This appears to be an initial check-in with the server and the response may contain an updated bitcoin address. The malware updates c.wnry with the current time at offset 0x60. The malware then copies u.wrny to @WanaDecryptor@.exe and executes the script shown in Figure 5 to create @WanaDecryptor@.exe.lnk. The script is saved to a randomly generated filename based on the current time and a random value using characters from '0' to '9'. Example filename: ""188391494652743.bat"". Figure 5: WannaCry internal script for moving and deleting files The malware then writes either ""$<Value>worth of bitcoin"" or ""%.<Value> BTC"" depending on the configuration – followed by the contents of the file r.wnry to @Please_Read_Me@.txt, which reads as follows: Q: What's wrong with my files? A: Ooops, your important files are encrypted. It means you will not be able to access them anymore until they are decrypted.
    If you follow our instructions, we guarantee that you can decrypt all your files quickly and safely!
    Let's start decrypting! Q: What do I do? A: First, you need to pay service fees for the decryption.
    Please send <Ransom Amount> to this bitcoin address: <Bitcoin_address>     Next, please find an application file named ""@WanaDecryptor@.exe"". It is the decrypt software.
    Run and follow the instructions! (You may need to disable your antivirus for a while.) Q: How can I trust? A: Don't worry about decryption.
    We will decrypt your files surely because nobody will trust us if we cheat users. *   If you need our assistance, send a message by clicking <Contact Us> on the decryptor window. Figure 6: Encryption warning displayed to user The malware then targets files on the user's desktop and documents folders. When the malware starts scanning a directory it creates a temporary file with the prefix ""~SD"", and deletes it if successful. When selecting which files to encrypt, the malware skips over files with .exe, .dll, and .wncry extensions. The files with the extensions shown in Figure 7 are selected for encryption. Files larger than 209,715,200 bytes may also be encrypted. Figure 7: Files targeted for encryption The malware may ignore folders with the following names: The malware will also compare folder names with the following string, and avoid encryption if identified: Note: The string contains a leading whitespace. This particular check is likely included for testing/development purposes. When a directory contains a file that will be encrypted, the malware copies @Please_Read_Me@.txt and @WanaDecryptor@.exe to the directory. It verifies that the first eight bytes do not contain the string WANACRY! and performs additional checks on the header to verify the file is not already encrypted. The files are encrypted with a randomly generated 128-bit AES key in CBC mode with a NULL initialization vector. The key is generated per file, is encrypted with the generated RSA public key, and included in the encrypted file header. Each file encrypted by the malware starts with the string WANACRY! and has the WNCRY extension. Depending on the file properties, the malware may also stage files in a WNCRYT extension. Table 4 shows the file format of encrypted files. Offset Value 0x0000 WANACRY! 0x0008 Length of RSA encrypted data 0x000C RSA encrypted AES file encryption key 0x010C File type internal to WannaCry 0x0110 Original file size 0x0118 Encrypted file contents  (AES-128 CBC) Table 4: Encrypted file format When encrypting the AES key with RSA, the malware may use the embedded RSA key or a key randomly generated. If the file f.wnry does not exist during initilazation, the malware generates a random number if the file size is less than 209,715,200 bytes. If the number is a multiple of 100, the malware uses the embedded RSA key to encrypt the AES key. A maximum of ten files can be encrypted with this key. When an AES key is encrypted with this RSA key, the malware writes the file path to the file f.wnry. If the random number is not a multiple of 100 or the file f.wnry already exists on the system, the malware will encrypt the AES key with the randomly generated RSA key. Once the malware completes encrypting the desktop and documents folders, it executes the following commands: The malware then encrypts files found on logical drives attached to the system that are not type DRIVE_CDROM. The malware may execute the command: The malware executes the command: The malware will copy b.wnry to @WanaDecryptor@.bmp and place it in each user’s desktop folder, as well as a copy of @WanaDecryptor@.exe. The malware communicates with an Onion server using a Tor server running on local host TCP port 9050. The malware registers the system with the Onion server, transferring encryption keys and deleting volume shadows. Once the ransom is paid, the malware obtains the decrypted RSA private key from the Onion server and decrypts ransomed files. It first attempts to read the contents of the registry path HKLM\Software\WanaCrypt0r\wd. If this fails, the malware attempts to read the contents from a similar registry path within the HKCU registry hive. If one of the registry paths exists, the malware sets the current directory to value read from the registry. The malware attempts to open c.wnry from the current directory and read 780 bytes if it exists. If the file does not exist, the file is created with the contents shown in Figure 8.  Figure 8: Contents of c.wnry The value at offset 0x6c (0x59140342) in c.wnry is the timestamp the file was created. The remaining values are hardcoded within the binary. The decryptor component accepts the command line arguments shown in Table 5. Argument Description fi Connects to an Onion server sending details from the system including the host name, user name and eight bytes from 00000000.res. The response may include a Bitcoin address that is updated in c.wnry. co Appears to be an initial check-in with the ransom server without displaying the ransom interface. vs Deletes volume shadow copies using the vssadmin utility. Table 5: Accepted commands fi Argument The malware reads 136 bytes from the file ""00000000.res"" in the current path. If the file does not exist the malware exits. The malware reads two URLs from c.wnry at offsets 0x242 and 0x1DE. The first URL at offset 0x1DE in c.wnry is: The alternate URL at offset 0x242 is not configured. The malware then binds a TCP socket to the localhost (127.0.0.1) and connects to port 9050 on the localhost. The malware then checks if the path ""TaskData\Tor\taskhsvc.exe"" exists. If the file does not exist it is extracted from the archive s.wnry. If s.wnry does not exist, the malware downloads the first URL in the configuration – and if this fails it attempts the second. When downloading from a URL, the downloaded file is first saved to a filename generated with GetTempFileNameA with a ""t"" prefix within the TaskData folder. The downloaded file is a Zip archive that is extracted to the ""TaskData"" folder. Once extracted, the malware copies ""TaskData\Tor\tor.exe"" to ""TaskData\Tor\taskhsvc.exe"" and executes it. The malware parses the string obtained at offset 0xE4 in the configuration file c.wnry for Onion servers to connect to. The Onion servers listed in the configuration file are as follows: The malware sends the first eight bytes of the file 00000000.res, the host name, user name and the string ""+++"" to the Onion server. The command and control protocol appears to be custom and XOR encoded with a randomly generated buffer. The response from the server is added to c.wnry if the string is 30 to 50 characters in length. The following is an example message sent to the server: co Argument This argument the malware scans for file names in the format <8_Uppercase_Hex>.res. The file the malware is likely looking for is 00000000.res that is created by the encryption DLL.  The malware then generates a C2 message containing four values (Table 6) obtained from the "".res"" file in the following format: Note: In the aforementioned example, the values are separated with a TAB character. Value Description --- Hard-coded string likely intended to identify the command Time0 Time value obtained from offset 0x60 Time1 Time value obtained from offset 0x78 Unknown int0 Integer obtained from offset 0x7C Unknown long 64-bit Integer obtained from offset 0x80 Index Count of the current file when scanning for files in the format <8_Uppercase_Hex>.res Table 6: C2 message values Figure 9 shows an example of a message.  Figure 9: Sample C2 message After sending the message, the malware exits. vs Argument The malware sleeps for 10 seconds and then executes the following command using CreateProcess or RunAs (depending on group membership): No Argument The malware copies b.wnry from the current directory to the desktop with the filename @WanaDecryptor@.bmp. The desktop wallpaper is then set to the path of the bitmap and the dialog shown in Figure 6 is then displayed. When the user clicks on the ""Contact us"" link, the malware sends the message to the Onion server using the following format: Depending on the response from the server, the malware may display a message box with one of the following values: When the user clicks on ""Check Payment"". The malware first check if the file 00000000.dky is present on the system. If the file is present, it attempts to verify the key by encrypting a file with the key obtained from 00000000.pky and decrypting it with the key obtained from 00000000.dky. If the file is not present, the malware sends the contents of 00000000.eky to the Onion server. The response from the server is saved to 00000000.dky. If the key cannot be validated, the malware displays a message box with the contents: You did not pay or we did not confirmed your payment!
Pay now if you didn't and check again after 2 hours.
Best time to check: 9:00am - 11:00am GMT from Monday to Friday. When the decrypt button is clicked without the ransom being paid, the malware decrypts the files listed in f.wnry. The files listed in f.wnry are those randomly selected to be encrypted with the embedded public key. This process is covered in the Encryption component section above. (MD5: db349b97c37d22f5ea1d1841e3c89eb4) (MD5: 84c82835a5d21bbcf75a61706d8ab549) (MD5: f351e1fcca0c4ea05fc44d15a17f8b36) (MD5: 7bf2b57f2a205768755c07f238fb32cc) The following table contains observed killswitch domains and their associated sample hash. Domain Associated Sample MD5 Hash iuqssfsodp9ifjaposdfjhgosurijfaewrwergwea.com c2559b51cfd37bdbd5fdb978061c6c16 ayylmaotjhsstasdfasdfasdfasdfasdfasdfasdf.com (This domain matches the format of WannaCry-associated domains, but has not yet been clearly linked to a specific sample. Organizations wish to maintain awareness of this domain in the event that it is associated with WannaCry activity.) a44964a7be94072cdfe085bc43e7dc95 ifferfsodp9ifjaposdfjhgosurijfaewrwergwea.com 80ce983d22c6213f35867053bec1c293 iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com db349b97c37d22f5ea1d1841e3c89eb4 iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.test 96dff36b5275c67e35097d77a120d0d4 FireEye has developed the following Yara rules for WannaCry detection: rule FE_RANSOMWARE_WANNACRY {
            meta:version="".4""
             filetype=""PE""
             author=""Ian.Ahl@fireeye.com @TekDefense""
             date=""2017-05-12""
             description=""Generic detection for most WannaCry variants""
 strings:
             // Bitcoin URLs
             $bcURL1 = ""http://www.btcfrog.com/qr/bitcoinPNG.php?address=%"" ascii wide nocase
             $bcURL2 = ""https://www.google.com/search?q=how+to+buy+bitcoin"" ascii wide nocase             // Ransom Message
            $msg1 = ""Congratulations! Succeed to check your payment!"" ascii wide
             $msg2 = ""Start decrypting now!"" ascii wide
             $msg3 = ""All your files have been decrypted!"" ascii wide
             $msg4 = ""Pay now, if you want to decrypt ALL your files!"" ascii wide
             $msg5 = ""Send $%d worth of bitcoin to this address:"" ascii wide
             $msg6 = ""Ooops, your files have been encrypted!"" ascii wide             // WANNA Strings
            $wanna1 = ""Wanna Decryptor 1.0"" ascii wide
             $wanna2 = ""Wana Decrypt0r"" ascii wide
             $wanna3 = ""Wana Decryptor"" ascii wide
             $wanna4 = ""WANNACRY"" ascii wide nocase
             $wanna5 = ""WanaCrypt0r"" ascii wide nocase
             $wanna6 = ""WANACRY!"" ascii wide
             $wanna7 = ""WNcry@2ol7"" ascii wide
             $wanna8 = ""wcry@123""
             $wanna9 = ""wcry@2016""             // File references
            $fileA1 = ""!WannaCryptor!.bmp"" ascii wide
             $fileA2 = ""!WannaDecryptor!.exe.lnk"" ascii wide
             $fileA3 = ""!Please Read Me!.txt"" ascii wide             $fileB1 = ""@WanaDecryptor@.bmp"" ascii wide
            $fileB2 = ""@WanaDecryptor@.exe.lnk"" ascii wide
             $fileB3 = ""@Please_Read_Me@.txt"" ascii wide             // CMDS
            $cmd1 = ""cmd.exe /c start /b vssadmin.exe Delete Shadows /All /Quiet"" ascii wide nocase
             $cmd2 = ""wmic shadowcopy delete"" ascii wide
             $cmd3 = ""bcdedit /set {default} bootstatuspolicy ignoreallfailures"" ascii wide
             $cmd4 = ""bcdedit /set {default} recoveryenabled no"" ascii wide
             $cmd5 = ""wbadmin delete catalog -quiet"" ascii wide
             $cmd6 = ""icacls . /grant Everyone:F /T /C /Q"" ascii wide             // MISC
            $misc1 = ""StartTask"" wide ascii
             $misc2 = ""b.wry"" wide ascii
             $misc3 = ""c.wry"" wide ascii
             $misc4 = ""m.wry"" wide ascii
             $misc5 = ""inflate 1.1.3 Copyright 1995-1998 Mark Adler"" wide ascii
             $misc6 = ""?AVtype_info@@"" wide ascii condition:
            (
                         (
                                     (uint16(0) == 0x5A4D)
                         )
                         and
                         (
                                     all of ($fileA*)
                                     or
                                     all of ($fileB*)
                                     or
                                     (4 of ($msg*) and 2 of ($bcURL*))
                                     or
                                     2 of ($wanna*)
                                     or
                                     (2 of ($msg*) and 1 of ($cmd*))
                                     or
                                     4 of ($cmd*)
                                     or
                                     (1 of ($wanna*) and 1 of ($cmd*))
                                     or
                                     (1 of ($wanna*) and 3 of ($misc*))
                         )
             ) CVE-1111-11111
 } rule FE_RANSOMWARE_WANNACRY_EB {
            meta:version="".1""
            filetype=""PE""
            author=""Ian.Ahl@fireeye.com @TekDefense""
            date=""2017-05-12""
           description=""Focusing on the WannaCry variants with worm capabilities""
 strings:             // EB related strings in WANNACRY
             $eb1 = ""__USERID__PLACEHOLDER__@"" ascii wide
             $eb2 = ""__TREEID__PLACEHOLDER__"" ascii wide
             $eb3 = ""LANMAN1.0"" ascii wide
             $eb4 = ""LANMAN2.1"" ascii wide
             $eb5 = ""\\PIPE\\"" ascii wide
             $eb6 = ""\\\\%s\\IPC$"" ascii wide
             $eb7 = ""__TREEPATH_REPLACE__"" ascii wide
             $eb8 = ""/K__USERID__PLACEHOLDER__"" ascii wide condition:
            (
                         (
                                     (uint16(0) == 0x5A4D)
                         ) CVE-2222-22222
                         and
                         (
                                     all of ($eb*)
                         )
             )
 }  "
WannaCry Ransomware Campaign: Threat Details and Risk Management,"We observed the emergence of a new WannaCry variant with the internet-check URL www.ifferfsodp9ifjaposdfjhgosurijfaewrwergwea[.]testing. A bug in the code logic causes the malware to actually query www.ifferfsodp9ifjaposdfjhgosurijfaewrwergwea[.]test. The malware will encrypt your files only if it cannot contact this domain (specifically, if it cannot make a successful HTTP request to the resolution of the domain). Security researchers were able to register these “killswitch” domains for previous variants to stop encryption; however, this particular domain cannot be registered, since the .test TLD is reserved by the Internet Engineering Task Force (IETF) for testing purposes only. So, if this malware infects a system, the infrastructure killswitch approach used to date cannot be applied to stop encryption. Organizations seeking to protect themselves from this latest variant can still “locally” sinkhole the domain by adding a DNS A-record to their DNS server and translating the domain to any of the existing sinkhole IPs. We are currently investigating how widely this new variant has spread. It is possible that this variant could spread rapidly – similarly to the variant that emerged on May 12 – if positioned with the ability to contact a large number of machines exposed to the SMB vulnerability. FireEye has analyzed a number of systems infected with WannaCry. Figure 2 depicts the real-time process execution events from a Windows 7 system infected with WannaCry via the EternalBlue SMB exploit. Of particular note is that the parent process of the mssecsvc.exe dropper is lsass.exe (which indicates that the system was compromised by the SMB exploit that injects a dll into lsass.exe). Additionally, all malware specific processes are owned by system accounts (e.g. NT AUTHORITY\SYSTEM and BUILTIN\Administrators) and not the primary user of the system. Figure 2: Real-time process execution events Systems successfully infected with WannaCry will scan random IP addresses very rapidly (about 25 IP addresses per second) for open TCP 445 ports (the port used for SMB communications) and if open will attempt to spread the WannaCry infection using the EternalBlue SMB exploit. Figure 3 depicts the real-time TCPv4 network connection events from a Windows 7 system infected with WannaCry. Figure 3: Real-time TCPv4 network connection events On May 15, we observed at least two new killswitch domains being used by WannaCry variants, ayylmaotjhsstasdfasdfasdfasdfasdfasdfasdf[.]com (This domain matches the format of WannaCry-associated domains, but has not yet been clearly linked to a specific sample. Organizations wish to maintain awareness of this domain in the event that it is associated with WannaCry activity.) and iuqssfsodp9ifjaposdfjhgosurijfaewrwergwea[.]com. These domains were also sinkholed. Again, we currently lack visibility as to whether these changes were implemented by the original distributors or a third party modifying distributed samples. At this time, multiple potential attribution scenarios for the WannaCry activity are viable. We are continuing to investigate all potential attribution scenarios. Financially-motivated cyber criminals are typically responsible for ransomware operations, with many such actors operating independently worldwide; however, as of yet, none of these actors have been identified as a strong candidate for attributing the WannaCry operation. Some aspects of the WannaCry operation suggest the operators may not be highly sophisticated and may not have anticipated the malware would spread as widely as it has. One of these aspects is the aforementioned killswitch functionality. Sophisticated malware developers experienced with combatting security countermeasures might have anticipated this functionality would constitute a threat to the malware’s success. Another aspect is that identified ransom payments have been reported to be relatively low thus far, suggesting the operators’ payment system may not have been equipped to handle the outcome of worldwide infections. Numerous open-source reports allege potential North Korean involvement in this campaign. Based on FireEye’s initial analysis, the code similarities cited between allegedly North Korea-linked malware and WannaCry constitute a potential lead worth further investigation, but are not unique enough independent of other evidence to be clearly indicative of common operators. See the bottom of the post for a list of related MD5s, URLs, Tor sites, executables, registry keys, files created, file strings, processes started, and SNORT signatures. The following is the blog as originally published on May 15. Since May 12, 2017, a highly prolific WannaCry ransomware campaign has been observed impacting organizations globally. WannaCry (aka WCry or WanaCryptor) malware is self-propagating (worm-like) ransomware that spreads through internal networks and over the public internet by exploiting a vulnerability in Microsoft Server Message Block (SMB) protocol. The malware appends encrypted data files with the .WCRY extension, drops and executes a decryptor tool, and demands $300 or $600 USD (via Bitcoin) to decrypt the data. The malware uses encrypted Tor channels for command and control (C2) communications. Based on our analysis, malicious binaries associated with WannaCry activity are comprised of two distinct components, one that provides ransomware functionality – acting very similar to WannaCry malware samples reported before May 12 – and a component used for propagation, which contains functionality to enable the discussed scanning and SMB exploitation capabilities. Given the rapid and prolific distribution of this ransomware, FireEye iSIGHT Intelligence considers this activity to pose a significant risk to all organizations using potentially vulnerable Windows machines. WannaCry exploits a Windows SMB vulnerability to enable propagation after having established a foothold in an environment. This propagation mechanism can distribute the malware both within the compromised network and over the public internet. The exploit used is codenamed “EternalBlue” and was leaked by Shadow Brokers. The exploited vulnerability, was patched in Microsoft MS17-010. Based on our analysis, the malware spawns two threads. The first thread enumerates the network adapters and determines which subnets the system is on. The malware then generates a thread for each IP on the subnet. Each of these threads attempt to connect to the IP on TCP port 445 and, if successful, attempt exploitation of the system. An example of an attempt to exploit a remote system can be seen in Figure 1. Figure 1: WannaCry network traffic attempting SMB exploit In response to the use of this exploited vulnerability, Microsoft has provided specific risk management steps for WannaCry. While WannaCry ransomware has spread primarily through SMB exploitation, its operators may also use other distribution methods. Early reports suggested WannaCry was spread through malicious links in spam messages; however, FireEye has been unable to corroborate that information from any of our investigations to date. Regardless of the original infection vector, WannaCry operators could adopt any delivery mechanism common to ransomware activity, such as malicious documents, malvertising, or compromises of high-traffic sites. In light of this campaign's high impact thus far and the uncertainties as to early distribution vectors, organizations should consider any common malware delivery vector a potential source of WannaCry infection. Each of the WannaCry variants identified to date (that had worm-like functionality) included a killswitch that a number of security researchers have used to prevent the malware from encrypting files. However, operators could eliminate or modify this feature, as demonstrated by the emergence of multiple variants with new a domain. Despite encouraging reports of waning threat activity, WannaCry continues to pose significant risks. Given this malware's effective repropagation mechanisms, virtually any organization that hasn’t applied Microsoft’s recommended mitigation mechanisms is at potential risk of attempted WannaCry propagation. Furthermore, the emergence of new variants demonstrates the operators could remove WannaCry's killswitch functionality if desired, or significantly modify it to avoid countermeasures taken thus far. Public reports demonstrate that incidents associated with the WannaCry ransomware family have occurred in many countries. Organizations seeking to protect themselves from this threat should read Microsoft's blog on addressing the associated SMB exploitation. The rapid, prolific distribution of this ransomware has influenced swift, proactive updates to FireEye’s entire portfolio of detection technologies, threat intelligence analysis and recommendations and consulting services. FireEye’s Network, Email, and Endpoint products have ransomware detection capabilities that can proactively detect and, if deployed inline, or with Exploit Guard enabled, can block new ransomware (including WannaCry) distributed through web and email infection vectors. WannaCry operators could leverage these popular delivery mechanisms at any time. Should this occur, FireEye product customers would be alerted by the following alerts: FireEye products also detect later stage WannaCry activity, such as command and control communications and host indicators for existing WannaCry infections. Additionally, FireEye PX (Network Forensics) sensors deployed internally and monitored by FireEye as a Service (FaaS) can detect SMB propagation traffic. Customers can leverage confirmed indicators to hunt for possible infections. These indicators have been deployed to FireEye HX (Endpoint) customers and are available on the MySIGHT intelligence portal for iSIGHT subscription customers.  Network proxies and other enterprise network security features may prevent the malware from contacting its killswitch domain and inadvertently trigger encryption. Organizations may wish to adjust their proxy configurations or other network configurations to avoid this problem. Additionally, organizations can leverage the following indicators of compromise to identify potentially related activity. These have been obtained during preliminary analysis of associated samples and continuing investigation. Related Sample MD5s: 0156edf6d8d35def2bf71f4d91a7dd22 0156edf6d8d35def2bf71f4d91a7dd22 0279e96244d8d8fa636c8f38baff99d7 05a00c320754934782ec5dec1d5c0476 06e235714dfa46e0ef3d15e45331ebe1 09431f379fc1914685f93f56c2400133 0cb40a8a51539e2c5727c3ec87af8a56 0fb1ce09b168987ce7f47bcd82fa034d 1177e33203cb8b1d71fe9147364328fe 13d702666bb8eadcd60d0c3940c39228 16aa3809de7a2a87d97de34ed7747638 18ad48cf2ed0cfeda8636187169ab181 1c615bf80a47848f17f935e689ae7ee2 246c2781b88f58bc6b0da24ec71dd028 2822abbaff89f989a4377b3c54067540 29365f675b69ffa0ec17ad00649ce026 2b4e8612d9f8cdcf520a8b2e42779ffa 2ca9ea7966269b22b5257f7a41817e1f 3175e4ba26e1e75e52935009a526002c 31dab68b11824153b4c975399df0354f 32f5d4bb6e967ac8c15950322b69975b 340a0e61c7f9b4e17e66e5114b1fffdb 3600607ab080736dd31859c02eaff188 36ebcf590480009be4c9c2259982a71a 38089fd3b6f1faa54cfe974fd1e29f0a 3c1ab42f5dd52f217ec57d270ffc8960 3c6375f586a49fc12a4de9328174f0c1 42fcf5f97f224c53a0434856016c706c 4362e287ca45a4862b7fe9ecaf46e985 468d1f5e0b048c16fd6d5364add58640 46d140a0eb13582852b5f778bb20cf0e 4e1f1183a31740618213f4e4c619b31c 4fef5e34143e646dbf9907c4374276f5 509c41ec97bb81b0567b059aa2f50fe8 546c1d3e78d9a0c676648e1230b8d454 54a116ff80df6e6031059fc3036464df 573a15b128431309c6af6caeb27dd44c 57aaa19f66b1eab6bea9891213ae9cf1 57b5c96abfd7ab5f33d9e3c20067687a 5902d0ea85b00f59a44c6d1c9174da56 59815ca85fa772753ca37fa0399c668c 59fc71209d74f2411580f6e1b6daf8d8 5bef35496fcbdbe841c82f4d1ab8b7c2 638f9235d038a0a001d5ea7f5c5dc4ae 6a4041616699ec27b42f98bbf111a448 707282fc5832e4674a2b5904b4115202 775a0631fb8229b2aa3d7621427085ad 7bf2b57f2a205768755c07f238fb32cc 7ecd842a3e9b1bcb3bb70b98220a563b 7f7ccaa16fb15eb1c7399d422f8363e8 80a2af99fd990567869e9cf4039edf73 82fc5885862b097be5ec9ec2176e30f1 82fd8635ff349f2f0d8d42c27d18bcb7 835fff032c51075c0c27946f6ebd64a3 8495400f199ac77853c53b5a3f278f3e 84a912cc30e697c4aab6978fb2fceb7c 84c82835a5d21bbcf75a61706d8ab549 86721e64ffbd69aa6944b9672bcabb6d 8d8e65121556519531ff64c1ed0bfe09 8dd63adb68ef053e044a5a2f46e0d2cd 8ff9c908dea430ce349cc922cee3b7dc 92cc807fa1ff0936ef7bcd59c76b123b 93ebec8b34a4894c34c54cca5039c089 947d69c0531504ee3f7821574ea405a7 9503af3b691e22149817edb246ea7791 96714005ac1ddd047a8eda781249d683 96dff36b5275c67e35097d77a120d0d4 998ea85d3e72824a8480d606d33540a6 a0a46b3ea8b643acd8b1b9220701d45d a155e4564f9ec62d44bf3ea2351fd6ce a2ded86d6ddc7d1fca74925c111d6a95 a6aad46f69d3ba3359e4343ab7234bb9 abcb7d4353abee5083ddd8057c7cd1ff b0ad5902366f860f85b892867e5b1e87 b27f095f305cf940ba4e85f3cb848819 b6043ef3f8b238e4f5be6e2aa061c845 b675498639429b85af9d70be1e8a8782 b6ded2b8fe83be35341936e34aa433e5 b77288deb5e9ebced8a27c5ea533d029 b7f7ad4970506e8547e0f493c80ba441 b8a7b71bfbde9901d20ab179e4dead58 bdda04ebcc92840a64946fc222edc563 be70ee98253ae9ebbf91af35da829ee0 be74e91f1ef8b4cb9e3918911e429124 bec0b7aff4b107edd5b9276721137651 c2559b51cfd37bdbd5fdb978061c6c16 c39ed6f52aaa31ae0301c591802da24b c61256583c6569ac13a136bfd440ca09 cb97641372f4e31670574cc4faa5df59 cee8d1683a187a477ee319c2ddd09d4d cf1416074cd7791ab80a18f9e7e219d9 d545a745c4fc198798e590b00ba7dd59 d5dcd28612f4d6ffca0cfeaefd606bcf d6114ba5f10ad67a4131ab72531f02da d724d8cc6420f06e8a48752f0da11c66 db349b97c37d22f5ea1d1841e3c89eb4 df535dcb74ab9e2ba0a63b3519eee2bb e16b903789e41697ecab21ba6e14fa2b e372d07207b4da75b3434584cd9f3450 eb7009df4951e18ccbe4f035985b635c efa8cda6aa188ef8564c94a58b75639f f0d9ffefa20cdadf5b47b96b7f8d1f60 f107a717f76f4f910ae9cb4dc5290594 f351e1fcca0c4ea05fc44d15a17f8b36 f4856b368dc74f04adb9c4548993f148 f529f4556a5126bba499c26d67892240 f9992dfb56a9c6c20eb727e6a26b0172 f9cee5e75b7f1298aece9145ea80a1d2 fa44f2474ba1c807ad2aae6f841b8b09 fad4b98c046f693513880195c2bef2dd ff81d72a277ff5a3d2e5a4777eb28b7b Related URLs: iuqssfsodp9ifjaposdfjhgosurijfaewrwergwea[.]com ifferfsodp9ifjaposdfjhgosurijfaewrwergwea[.]com iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea[.]com Ayylmaotjhsstasdfasdfasdfasdfasdfasdfasdf[.]com (This domain matches the format of WannaCry-associated domains, but has not yet been clearly linked to a specific sample. Organizations wish to maintain awareness of this domain in the event that it is associated with WannaCry activity.) Related Tor Sites: 57g7spgrzlojinas[.]onion 76jdd2ir2embyv47[.]onion cwwnhwhlz52maqm7[.]onion gx7ekbenv2riucmf[.]onion sqjolphimrr7jqw6[.]onion Xxlvbrloxvriy2c5[.]onion Related Executables: C:\Windows\mssecsvc.exe C:\Windows\tasksche.exe Related Registry Keys: HKEY_LOCAL_MACHINE\Software\WanaCrypt0r Related Files Created: %TEMP%\m.vbs %TEMP%\b.wrny %TEMP%\c.wrny taskse.exe taskdl.exe @Please_Read_Me@.txt @WanaDecryptor@.exe Related File Strings: Wanna Decryptor 1.0 Wana Decrypt0r Wana Decryptor WANNACRY WanaCrypt0r WANACRY! WNcry@2ol7 Note: Additional files with .wncry extensions may be created. Related Processes Started: cscript.exe //nologo m.vbs Related SNORT Signatures: The following SNORT signatures may be useful for identifying SMB exploitation activity related to this threat."
WannaCry Endpoint Security Demo,"A FireEye engineer demonstrates how Endpoint Security stops the
  WannaCry ransomware."
"SMB Exploited: WannaCry Use of ""EternalBlue""","Server Message Block (SMB) is the transport protocol used by Windows machines for a wide variety of purposes such as file sharing, printer sharing, and access to remote Windows services. SMB operates over TCP ports 139 and 445. In April 2017, Shadow Brokers released an SMB vulnerability named “EternalBlue,” which was part of the Microsoft security bulletin MS17-010. The recent WannaCry ransomware takes advantage of this vulnerability to compromise Windows machines, load malware, and propagate to other machines in a network. The attack uses SMB version 1 and TCP port 445 to propagate. SMB provides support for what are known as SMB Transactions. Using SMB Transactions enables atomic read and write to be performed between an SMB client and server. If the message request is greater than the SMB MaxBufferSize, the remaining messages are sent as Secondary Trans2 requests. This vulnerability affects the srv2.sys kernel driver and is triggered by malformed Secondary Trans2 requests. After the initial SMB handshake, which consists of a protocol negotiate request/response and a session setup request/response, the ransomware connects to the IPC$ share on the remote machine. Another related aspect of this attack is that the malware is configured to connect to a hardcoded local IP, as shown in Figure 1. Figure 1: Connecting to the IPC$ share Next it sends out an initial NT Trans request, which is a huge payload size and consists of a sequence of NOPs, as shown in Figure 2. What it essentially does is move the SMB server state machine to a point where the vulnerability exists so that the attacker can then exploit it using a special crafted packet. Figure 2: Preparing server for exploit via NT Trans Speaking the SMB language, the large NT Trans request leads to multiple Secondary Trans2 Requests to accommodate for the large request size. These Secondary Trans2 requests are malformed, as seen in the Figure 3. They act as a trigger point for the vulnerability, and the request data portion contains the shellcode and encrypted payload, which is the launcher for the malware on the remote machine. Figure 3: Overflow via Malformed Trans2 On successfully triggering the vulnerability, an encrypted payload containing the stager for the malware is loaded on the remote machine. The payload delivered to the remote machine launches a service “mssecsvc” from within the lsass process. This service scans the local network and the internet for machines that are accessible and have exposed SMB ports. The service then uses the aforementioned vulnerability to gain access to a remote machine and deliver the malware payload, thus completing the full cycle. All of these activities happen very quickly and the attack penetrates all machines in a typical LAN within minutes. The ransomware contains two parts, the main executable file containing the code for scanning the network and triggering the SMB vulnerability on accessible machines. Within the resource section of this executable is another executable file embedded in a section named “R”, which contains the ransomware code. The executable containing the ransomware code has an encrypted ZIP file embedded in the resource section named “XIA”. The encrypted ZIP file contains encrypted keys, image files, Tor client and two other executables: taskdl.exe and tasse.exe. The ZIP file contents can be extracted using the password WNcry@2ol7 embedded within the malware code There are anomalies and patterns in the NT Trans, Trans2 requests and responses packets that analysts and researchers can use to create useful network level detection. A couple of example signatures that can be deployed are found here and here."
Watch FireEye Endpoint Security Detect and Prevent a WannaCry Attack,"Since May 12, 2017, a highly prolific WannaCry ransomware campaign has been observed impacting organizations globally. WannaCry (aka WCry or WanaCryptor) malware is self-propagating (worm-like) ransomware that spreads through internal networks and over the public internet by exploiting a vulnerability in Microsoft Server Message Block (SMB) protocol. The malware appends encrypted data files with the .WCRY extension, drops and executes a decryptor tool, and demands $300 or $600 USD (via Bitcoin) to decrypt the data. The following video demonstrates how FireEye Endpoint Security (HX) detects and prevents the WannaCry ransomware threat."
Threat actors leverage EternalBlue exploit to deliver non-WannaCry payloads,"The “EternalBlue” exploit (MS017-010) was initially used by WannaCry ransomware and Adylkuzz cryptocurrency miner. Now more threat actors are leveraging the vulnerability in Microsoft Server Message Block (SMB) protocol – this time to distribute Backdoor.Nitol and Trojan Gh0st RAT. FireEye Dynamic Threat Intelligence (DTI) has historically observed similar payloads delivered via exploitation of CVE-2014-6332 vulnerability as well as in some email spam campaigns using powershell commands. Specifically, Backdoor.Nitol has also been linked to campaigns involving a remote code execution vulnerability using the ADODB.Stream ActiveX Object that affects older versions of Internet Explorer. Both payloads have previously been involved in targeted cyber-attacks against the aerospace and defense industry. We observed lab machines vulnerable to SMB exploit were attacked by a threat actor using the EternalBlue exploit to gain shell access to the machine. Figure 1 shows an EternalBlue exploitation attempt.  Figure 1. Network traffic showing EternalBlue attack attempt The initial exploit technique used at the SMB level is similar to what we have been seen in WannaCry campaigns; however, once a machine is successfully infected, this particular attack opens a shell to write instructions into a VBScript file and then executes it to fetch the payload on another server. We have observed the same EternalBlue and VBScript combination used to distribute  Gh0st RAT in Singapore, as well as Backdoor.Nitol being delivered in the South Asia region.  Figure 2. VBScript instructions in ‘1.vbs’ The full VBScript instructions can be seen in Figure 2. The attacker echoes instructions into a new ‘1.vbs’ file to be executed later.  These instructions fetch the  payload ‘taskmgr.exe’ from another server in a synchronous call (as indicated by the second parameter ‘0’).  This action creates an ActiveX object ADODB.Stream, which allows reading the file coming from the server and writes the result of the binary data in a stream. Mode ‘3’ is used for read/write permissions while type ‘1’ indicates stream as binary data. Thereafter, it saves the binary stream to a location at “c:/” with option ‘2’ in order to overwrite any binary with the same name at that location. Later, we see that ‘1.vbs’ executes through a command-line version of the Windows Script Host which deletes the vbs file. Once the executable is fetched and saved, the attacker uses a shell to launch the backdoor from the saved location. Figure 3 shows Backdoor.Nitol being downloaded and infecting the machine.  Figure 3. Network traffic showing Backdoor.Nitol download The command and control (C2) for the Backdoor.Nitol sample is hackqz.f3322[.]org (120.209.40.157).  See Figure 4.  Figure 4. Backdoor.Nitol C2 communication The other malware that we’ve observed being deployed in this manner is Gh0st RAT. The observed dropper downloads the Gh0st RAT binary from beiyeye.401hk[.]com (Figure 5).  Figure 5. Gh0st RAT C2 communication The first five bytes in the header of the Gh0st RAT traffic is an indication of the Gh0st variant used. Historically we have seen wide-spread usage of variants employing the ‘cb1st’ magic header against the Education, Energy/Utilities, Manufacturing, Services/Consulting, and Telecom industries. For more information on this and other widely used variants of Gh0st RAT, please review GH0ST in the Machine: GH0ST RAT Remains Active in Financial Services Sector available on our subscription MySight portal. The Gh0St RAT sample observed in this attack, as well as other associated samples identified by FireEye are all signed with a common digital certificate purporting to be from 北京研创达科技有限公司 (Beijing Institute of Science and Technology Co., Ltd). Stolen or illegitimately purchased code signing certificates are increasingly used to lend legitimacy to malware. See the appendix for full details on the observed code signing certificate. The addition of the EternalBlue exploit to Metasploit has made it easy for threat actors to exploit these vulnerabilities. In the coming weeks and months, we expect to see more attackers leveraging these vulnerabilities and to spread such infections with different payloads. It is critical that Microsoft Windowsusers patch their machines and update to the latest software versions as soon as possible. FireEye Labs authors would like to thank Shahzad Ahmad and Kean Siong Tan for their contributions in this discovery. IOCs SHA sum
cba19d228abf31ec8afab7330df3c9da60cd4dae376552b503aea6d7feff9946
4f49e17b457ef202ab0be905691ef2b2d2b0a086a7caddd1e70dd45e5ed3b309 Downloader 121.201.9.204:45988 / taskmgr.exe  (Nitol)
beiyeye.401hk[.]com:1541 / systemUpdate.exe (Gh0st) C2 hackqz.f3322.org  (Nitol)
120.209.40.157:8880 (Nitol)
bj6po.a1free9bird[.]com (Gh0st)

Code-Signing Certificate "
