package cse576;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ExtractMalwareInfo {

	public static void main(String[] args) throws Exception {
		System.out.println("\n\n----------------------------------------------------------------------");
		if (args.length == 0) {
			System.out.println("Pass an Malware Name as cmd line.");
			return;
		}
		
		String path = Utility.getPath();
		
		SimpleDateFormat dateForm = new SimpleDateFormat("dd MMM, yyyy");
		for (String malwareSearched : args) {
			File file = new File(path + "\\data\\" + malwareSearched + ".csv");
			if (!file.exists()) {
				System.out.println("Run the scraper first for " + malwareSearched);
				continue;
			}

			String[] records = Utility.readCSV(path, malwareSearched);
			String malware = malwareSearched;

			for (String record : records) {

				String basename = "";
				String knownas = "Known as (\\w+)";

				Pattern p = Pattern.compile(knownas);
				Matcher matcher = p.matcher(record);

				if (matcher.find()) {
					basename = matcher.group(1);
				}

				HashMap<String, String[]> resultMalwareName = Utility
						.runCommand("python \"" + path + "\"\\python\\1.py \"" + record + "\" \"" + basename + "\"");
				if (resultMalwareName != null) {
					HashMap<String, String> extractedData = new HashMap<String, String>();
					String[] output = resultMalwareName.get("OUTPUT");
					if (output == null || output.length == 0) {
						for (String str : resultMalwareName.get("ERROR")) {
							System.out.println(str);
						}
						continue;
					}
//					System.out.println(":: Malware Name Result ::");
					for (String str : output) {
						String[] tmp = str.split(" :: ");
						if (tmp.length != 2) {
							// Ignore that line
							continue;
						}
						extractedData.put(tmp[0], tmp[1]);
//						System.out.println(str);
					}
//					System.out.println("################################");
					malware = extractedData.get("Name");
				}

				HashMap<String, Object> resultDateCVE = ExtractDateCVEfromReport.ExtractDateCVE(record);
				Date foundDate = (Date) resultDateCVE.get("DATE");
				Set<?> listCVETmp = null;
				String[] listCVE = null;
				Object cve = resultDateCVE.get("CVE");
				if (cve instanceof ArrayList<?>) {
					ArrayList<?> temp = (ArrayList<?>) cve;
					listCVETmp = new HashSet<>(temp);
				}

				if (listCVETmp != null && listCVETmp.size() > 0) {
					listCVE = listCVETmp.toArray(new String[listCVETmp.size()]);
				}

				System.out.println("Malware Name:       " + malware);
				System.out.println("Date Found:         " + dateForm.format(foundDate));
				System.out.println("CVE Exploited:      " + Arrays.toString(listCVE));
				System.out.println("Related Malware:    " + malwareSearched.substring(0, 1).toUpperCase()
						+ malwareSearched.substring(1));
				System.out.println("----------------------------------------------------------------------");
			}
		}

		System.exit(0);
	}
}
