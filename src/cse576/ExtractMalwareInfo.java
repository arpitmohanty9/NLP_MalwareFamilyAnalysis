package cse576;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.jruby.RubyProcess.Sys;

public class ExtractMalwareInfo {

	public static void main(String[] args) throws Exception {
		long millis = System.currentTimeMillis();
		StringBuilder progOutput = new StringBuilder(
				"----------------------------------------------------------------------");
		System.out.println("\n\n----------------------------------------------------------------------");
		if (args.length == 0) {
			System.out.println("Pass an Malware Name as cmd line.");
			return;
		}

		String path = Utility.getPath();

		SimpleDateFormat dateForm = new SimpleDateFormat("dd MMM, yyyy");
		for (String malwareSearched : args) {
			malwareSearched = malwareSearched.toLowerCase();
			File file = new File(path + "\\data\\" + malwareSearched + ".csv");
			if (!file.exists()) {
				System.out.println("Run the scraper first for " + malwareSearched);
				continue;
			}

			String[] records = Utility.readCSV(malwareSearched);
			String malware = malwareSearched;

			int count = 1;
			for (String record : records) {

				// Utility.getParsedJson(record, malwareSearched, count++);

				String basename = "";
				String knownas = "Known as (\\w+)";

				Pattern p = Pattern.compile(knownas);
				Matcher matcher = p.matcher(record);

				if (matcher.find()) {
					basename = matcher.group(1);
				}

				HashMap<String, String[]> pythonScriptResult = null;

				pythonScriptResult = Utility.runCommand(
						"python \"" + path + "\"\\python\\getMalwareName.py \"" + record + "\" \"" + basename + "\"");
				if (pythonScriptResult != null) {
					HashMap<String, String> extractedData = new HashMap<String, String>();
					String[] output = pythonScriptResult.get("OUTPUT");
					if (output == null || output.length == 0) {
						for (String str : pythonScriptResult.get("ERROR")) {
							System.out.println(str);
						}
						continue;
					}

					for (String str : output) {
						String[] tmp = str.split(" :::: ");
						if (tmp.length != 2) {
							// Ignore that line
							continue;
						}
						extractedData.put(tmp[0], tmp[1]);
					}

					if (extractedData.get("Name") != null) {
						malware = extractedData.get("Name");
					}
				}

				String semanticRoles = null, target = null, tools = null;
				String[] targetList = null, toolsList = null;
				pythonScriptResult = Utility
						.runCommand("python \"" + path + "\"\\python\\labelSemanticRole.py \"" + record + "\"");
				if (pythonScriptResult != null) {
					HashMap<String, String> extractedData = new HashMap<String, String>();
					String[] output = pythonScriptResult.get("OUTPUT");
					if (output == null || output.length == 0) {
						for (String str : pythonScriptResult.get("ERROR")) {
							System.out.println(str);
						}
						continue;
					}

					for (String str : output) {
						String[] tmp = str.split(" :::: ");
						if (tmp.length != 2) {
							// Ignore that line
							continue;
						}
						if (tmp[0].equalsIgnoreCase("SemanticRoleLabel")) {
							String label = extractedData.get("SemanticRoleLabel");
							if (label != null) {
								if (!tmp[1].equals("[]")) {
									extractedData.put(tmp[0], label + "\n" + tmp[1]);
								}
							} else {
								extractedData.put(tmp[0], tmp[1]);
							}
						} else {
							extractedData.put(tmp[0], tmp[1]);
						}

					}

					if (extractedData.get("SemanticRoleLabel") != null) {
						semanticRoles = extractedData.get("SemanticRoleLabel");
					}
					if (extractedData.get("Target") != null) {
						targetList = extractedData.get("Target").split(":-----:");
					}
					if (extractedData.get("Tools") != null) {
						toolsList = extractedData.get("Tools").split(":-----:");
						;
					}
				}

				HashMap<String, Object> resultDateCVE = DateCVEfromReport.ExtractDateCVE(record);
				Date foundDate = (Date) resultDateCVE.get("DATE");
				Set<?> listCVETmp = null;
				String[] listCVE = null;
				Object cve = resultDateCVE.get("CVE");
				if (cve instanceof ArrayList<?>) {
					ArrayList<?> temp = (ArrayList<?>) cve;
					listCVETmp = new HashSet<>(temp);
				}

				if (listCVETmp != null && listCVETmp.size() > 0) {
					listCVE = listCVETmp.toArray(new String[listCVETmp.size()]);
				}

				if (toolsList != null && toolsList.length > 0) {
					tools = toolsList[0];
					for (int i = 1; i < toolsList.length; i++) {
						tools += "\n                    " + toolsList[i];
					}
				}
				if (targetList != null && targetList.length > 0) {
					target = targetList[0];
					for (int i = 1; i < targetList.length; i++) {
						target += "\n                    " + targetList[i];
					}
				}

				System.out.println("Malware Name:       " + malware);
				System.out.println("Date Found:         " + dateForm.format(foundDate));
				System.out.println("CVE Exploited:      " + Arrays.toString(listCVE));
				System.out.println("Related Malware:    " + malwareSearched.substring(0, 1).toUpperCase()
						+ malwareSearched.substring(1));
				System.out.println("RoleLabel:          " + semanticRoles);
				System.out.println("Target:             " + target);
				System.out.println("Tools:              " + tools);
				System.out.println("----------------------------------------------------------------------");
				progOutput.append("\nMalware Name:       ");
				progOutput.append(malware);
				progOutput.append("\nDate Found:         ");
				progOutput.append(dateForm.format(foundDate));
				progOutput.append("\nCVE Exploited:      ");
				progOutput.append(Arrays.toString(listCVE));
				progOutput.append("\nTarget:             ");
				progOutput.append(target);
				progOutput.append("\nTools:              ");
				progOutput.append(tools);
				progOutput.append("\nRelated Malware:    ");
				progOutput.append(malwareSearched.substring(0, 1).toUpperCase() + malwareSearched.substring(1));
				progOutput.append("\n----------------------------------------------------------------------");
			}
		}

		millis = System.currentTimeMillis() - millis;
		String timeTaken = String.format("%02d min, %02d sec", TimeUnit.MILLISECONDS.toMinutes(millis),
				TimeUnit.MILLISECONDS.toSeconds(millis)
						- TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis)));

		String filePath = path + "/program_output.output";
		try (BufferedWriter bw = new BufferedWriter(new FileWriter(filePath))) {
			bw.write(progOutput.toString());
			bw.write("\n\n\nTotal Time Taken: " + timeTaken);
			// no need to close it.
			// bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		System.exit(0);
	}
}
