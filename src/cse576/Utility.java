package cse576;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.HashMap;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;


public class Utility {
	
	public static String getPath() {
		ClassLoader loader = Utility.class.getClassLoader();
		String path = loader.getResource("cse576/Utility.class").toString();
		path = path.substring(path.indexOf(":/") + 2);
		path = path.substring(0, path.indexOf("/cse576"));
		if (path.indexOf("/bin") != -1) {
			path = path.substring(0, path.indexOf("/bin"));
		}
		path = path.replace("/", "\\");
		path = path.replace("%20", " ");
		return path;
	}

	public static String[] readCSV(String path, String malwareName) {
		ArrayList<String> records = new ArrayList<String>();
		try {
			Reader in = new FileReader(path + "/data/" + malwareName + ".csv");
			Iterable<CSVRecord> recordsCSV = CSVFormat.EXCEL.withHeader().parse(in);

			for (CSVRecord record : recordsCSV) {
				// String title = record.get("title");
				String body = record.get("body");
				if (body.length() != 0) {
					// Pre-Processing Data
					body = body.replaceAll("\\.[\\n\\r]+",". ");
					body = body.replaceAll("[\\n\\r]+",". ");
					body = body.replaceAll("\\.\\s+\\.",". ");
					body = body.replaceAll("[\\t\\s]+"," ");
					body = body.replaceAll("–","-");
					body = body.replaceAll("([dD]ubbed (as )?)|([rR]eferred (to )?(as )?)", "Known as ");
					
//					System.out.println("---- BODY ----\n\n" + body + "\n\n----------------\n");
					
					records.add(body);
				}
			}
		} catch (IOException e) {
			System.out.println("-----");
			e.printStackTrace();
			System.out.println("-----");
		}
		return records.toArray(new String[0]);
	}

	public static HashMap<String, String[]> runCommand(String command) {

		String s = null;
		ArrayList<String> output = new ArrayList<String>();
		ArrayList<String> error = new ArrayList<String>();

		try {
			ProcessBuilder builder = new ProcessBuilder("cmd.exe", "/c", command);
			Process p = builder.start();

			BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));

			BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));

			// read the output from the command
			while ((s = stdInput.readLine()) != null) {
				output.add(s);
			}

			// read any errors from the attempted command
			while ((s = stdError.readLine()) != null) {
				error.add(s);
			}
			
			HashMap<String, String[]> result = new HashMap<String, String[]>();
			result.put("OUTPUT", output.toArray(new String[0]));
			result.put("ERROR", error.toArray(new String[0]));
			return result;
		} catch (IOException e) {
			System.out.println("exception happened - here's what I know: ");
			e.printStackTrace();
			return null;
		}
	}

}
