package cse576;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class Utility {
	private static PrintStream outBackup = null;
	private static String path = null;
	private static ArrayList<String> processedURL = null;

	public static void offOutputStream() {
		if (outBackup == null) {
			outBackup = System.out;
		}
		System.setOut(new PrintStream(new OutputStream() {
			@Override
			public void write(int b) throws IOException {
			}
		}));
	}

	public static void onOutputStream() {
		if (outBackup != null) {
			System.setOut(outBackup);
		}
	}

	public static String getPath() {
		if (path != null) {
			return path;
		}
		ClassLoader loader = Utility.class.getClassLoader();
		String pathT = loader.getResource("cse576/Utility.class").toString();
		pathT = pathT.substring(pathT.indexOf(":/") + 2);
		pathT = pathT.substring(0, pathT.indexOf("/cse576"));
		if (pathT.indexOf("/bin") != -1) {
			pathT = pathT.substring(0, pathT.indexOf("/bin"));
		}
		pathT = pathT.replace("/", "\\");
		pathT = pathT.replace("%20", " ");
		path = pathT;
		return pathT;
	}

	public static String[] readCSV(String malwareName) {
		if (path == null) {
			path = Utility.getPath();
		}
		if (processedURL == null) {
			processedURL = new ArrayList<String>();
		}

		ArrayList<String> records = new ArrayList<String>();
		try {
			Reader in = new FileReader(path + "/data/" + malwareName + ".csv");
			Iterable<CSVRecord> recordsCSV = CSVFormat.EXCEL.withHeader().parse(in);

			for (CSVRecord record : recordsCSV) {
				// String title = record.get("title");
				String url = record.get("url").split("&")[0];

				if (processedURL.contains(url)) {
					continue;
				} else {
					processedURL.add(url);
				}
				String body = record.get("body");
				if (body.length() != 0) {
					body = preprocessData(body);
					records.add(body);
					// System.out.println("---- BODY ----\n\n" + body + "\n\n----------------\n");
				}
			}
		} catch (IOException e) {
			System.out.println("-----");
			e.printStackTrace();
			System.out.println("-----");
		}

		return records.toArray(new String[0]);
	}

	public static String preprocessData(String data) {
		// Pre-Processing Data
		String body = data.replaceAll("\\.[\\n\\r]+", ". ");
		body = body.replaceAll("[\\n\\r]+", ". ");
		body = body.replaceAll("\\.\\s+\\.", ". ");
		body = body.replaceAll("[\\t\\s]+", " ");
		body = body.replaceAll("–", "-");
		body = body.replaceAll("[“”\"]", "");
		body = body.replaceAll("([dD]ubbed (as )?)|([rR]eferred (to )?(as )?)", "Known as ");
		body = body.replaceAll("[^\\x00-\\x7F]", "");

		return body;

	}

	public static HashMap<String, String[]> runCommand(String command) {

		String s = null;
		ArrayList<String> output = new ArrayList<String>();
		ArrayList<String> error = new ArrayList<String>();

		try {
			ProcessBuilder builder = new ProcessBuilder("cmd.exe", "/c", command);
			Process p = builder.start();

			BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));

			BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));

			// read the output from the command
			while ((s = stdInput.readLine()) != null) {
				output.add(s);
			}

			// read any errors from the attempted command
			while ((s = stdError.readLine()) != null) {
				error.add(s);
			}

			HashMap<String, String[]> result = new HashMap<String, String[]>();
			result.put("OUTPUT", output.toArray(new String[0]));
			result.put("ERROR", error.toArray(new String[0]));
			return result;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	public static JSONArray jsonArraySorting(JSONArray jsonArr, String keyName) {
		JSONArray sortedJsonArray = new JSONArray();
		if (keyName == null || keyName.equals("")) {
			keyName = "NodeID";
		}
		final String kn = keyName;
		List<JSONObject> jsonValues = new ArrayList<JSONObject>();
		for (int i = 0; i < jsonArr.length(); i++) {
			try {
				jsonValues.add(jsonArr.getJSONObject(i));
			} catch (JSONException e) {
				// TODO Auto-generated catch block
			}
		}
		Collections.sort(jsonValues, new Comparator<JSONObject>() {
			// You can change "Name" with "ID" if you want to sort by ID
			private final String KEY_NAME = kn;

			@Override
			public int compare(JSONObject a, JSONObject b) {
				String valA = new String();
				String valB = new String();

				try {
					valA = (String) a.get(KEY_NAME);
					valB = (String) b.get(KEY_NAME);
				} catch (JSONException e) {
					// do something
				}

				try {
					double A = Double.parseDouble(valA);
					double B = Double.parseDouble(valB);
					if (A > B)
						return 1;
					else if (A < B)
						return -1;
					else
						return 0;
				} catch (NumberFormatException ex) {
					return valA.compareTo(valB);
				}
				// if you want to change the sort order, simply use the following:
				// return -valA.compareTo(valB);
			}
		});

		for (int i = 0; i < jsonArr.length(); i++) {
			sortedJsonArray.put(jsonValues.get(i));
		}

		return sortedJsonArray;
	}

	public static <T> String ArrayToString(T[] a) {
		if (a == null) {
			return "";
		}
		StringBuilder res = new StringBuilder();
		for (int i = 0; i < a.length; i++) {
			if (i != 0) {
				res.append(", ");
			}
			res.append(a[i]);
		}
		return res.toString();
	}

	// public static void getParsedJson(String sentence) {
	// getParsedJson(sentence, "default", 1);
	// }

	/*
	 * public static void getParsedJson(String sentence, String name, int count) {
	 * if (path == null) { path = Utility.getPath(); } // Utility.offOutputStream();
	 * ParserHelper kparser = new ParserHelper(); StringBuilder finalJSON = new
	 * StringBuilder("[\n  "); for (String sent : sentence.split("\\. ")) { try {
	 * String json = kparser.getPrettyJsonString(sent, true); json =
	 * json.substring(json.indexOf("{"), json.lastIndexOf("}")); if
	 * (finalJSON.charAt(finalJSON.length() - 1) == '}') {
	 * finalJSON.append(",\n  "); } finalJSON.append(json); finalJSON.append("}");
	 * // Utility.onOutputStream(); // System.out.println("Sentence:" + sent); //
	 * Utility.offOutputStream(); } catch (Exception e) {
	 * System.out.println("ignoring wrong sentence"); // e.printStackTrace(); } }
	 * finalJSON.append("\n]");
	 * 
	 * String filePath = path + "/json/" + name + "_" + count + ".json"; try
	 * (BufferedWriter bw = new BufferedWriter(new FileWriter(filePath))) {
	 * bw.write(finalJSON.toString()); // no need to close it. // bw.close(); }
	 * catch (IOException e) { e.printStackTrace(); } }
	 */

}
