package cse576;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.util.ArrayList;
import java.util.HashMap;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;

import module.graph.ParserHelper;

public class Utility {
	private static PrintStream outBackup = null;
	private static String path = null;

	public static void offOutputStream() {
		if (outBackup == null) {
			outBackup = System.out;
		}
		System.setOut(new PrintStream(new OutputStream() {
			@Override
			public void write(int b) throws IOException {
			}
		}));
	}

	public static void onOutputStream() {
		if (outBackup != null) {
			System.setOut(outBackup);
		}
	}

	public static String getPath() {
		ClassLoader loader = Utility.class.getClassLoader();
		String path = loader.getResource("cse576/Utility.class").toString();
		path = path.substring(path.indexOf(":/") + 2);
		path = path.substring(0, path.indexOf("/cse576"));
		if (path.indexOf("/bin") != -1) {
			path = path.substring(0, path.indexOf("/bin"));
		}
		path = path.replace("/", "\\");
		path = path.replace("%20", " ");
		return path;
	}

	public static String[] readCSV(String malwareName) {
		if (path == null) {
			path = Utility.getPath();
		}

		ArrayList<String> records = new ArrayList<String>();
		try {
			Reader in = new FileReader(path + "/data/" + malwareName + ".csv");
			Iterable<CSVRecord> recordsCSV = CSVFormat.EXCEL.withHeader().parse(in);

			for (CSVRecord record : recordsCSV) {
				// String title = record.get("title");
				String body = record.get("body");
				if (body.length() != 0) {
					body = preprocessData(body);
					records.add(body);
					// System.out.println("---- BODY ----\n\n" + body + "\n\n----------------\n");
				}
			}
		} catch (IOException e) {
			System.out.println("-----");
			e.printStackTrace();
			System.out.println("-----");
		}
		return records.toArray(new String[0]);
	}

	public static String preprocessData(String data) {
		// Pre-Processing Data
		String body = data.replaceAll("\\.[\\n\\r]+", ". ");
		body = body.replaceAll("[\\n\\r]+", ". ");
		body = body.replaceAll("\\.\\s+\\.", ". ");
		body = body.replaceAll("[\\t\\s]+", " ");
		body = body.replaceAll("–", "-");
		body = body.replaceAll("[“”]", "");
		body = body.replaceAll("([dD]ubbed (as )?)|([rR]eferred (to )?(as )?)", "Known as ");

		return body;

	}

	public static HashMap<String, String[]> runCommand(String command) {

		String s = null;
		ArrayList<String> output = new ArrayList<String>();
		ArrayList<String> error = new ArrayList<String>();

		try {
			ProcessBuilder builder = new ProcessBuilder("cmd.exe", "/c", command);
			Process p = builder.start();

			BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));

			BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));

			// read the output from the command
			while ((s = stdInput.readLine()) != null) {
				output.add(s);
			}

			// read any errors from the attempted command
			while ((s = stdError.readLine()) != null) {
				error.add(s);
			}

			HashMap<String, String[]> result = new HashMap<String, String[]>();
			result.put("OUTPUT", output.toArray(new String[0]));
			result.put("ERROR", error.toArray(new String[0]));
			return result;
		} catch (IOException e) {
			System.out.println("exception happened - here's what I know: ");
			e.printStackTrace();
			return null;
		}
	}

	// public static void getParsedJson(String sentence) {
	// getParsedJson(sentence, "default", 1);
	// }

	public static void getParsedJson(String sentence, String name, int count) {
		if (path == null) {
			path = Utility.getPath();
		}
		// Utility.offOutputStream();
		ParserHelper kparser = new ParserHelper();
		StringBuilder finalJSON = new StringBuilder("[\n  ");
		for (String sent : sentence.split("\\. ")) {
			try {
				String json = kparser.getPrettyJsonString(sent, true);
				json = json.substring(json.indexOf("{"), json.lastIndexOf("}"));
				if (finalJSON.charAt(finalJSON.length() - 1) == '}') {
					finalJSON.append(",\n  ");
				}
				finalJSON.append(json);
				finalJSON.append("}");
				// Utility.onOutputStream();
				// System.out.println("Sentence:" + sent);
				// Utility.offOutputStream();
			} catch (Exception e) {
				System.out.println("ignoring wrong sentence");
//				e.printStackTrace();
			}
		}
		finalJSON.append("\n]");

		String filePath = path + "/json/" + name + "_" + count + ".json";
		try (BufferedWriter bw = new BufferedWriter(new FileWriter(filePath))) {
			bw.write(finalJSON.toString());
			// no need to close it.
			// bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
