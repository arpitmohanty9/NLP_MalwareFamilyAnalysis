package cse576;


import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

//import java.util.ArrayList;

//import module.graph.ParserHelper;
//import module.graph.SentenceToGraph;
//import module.graph.helper.GraphPassingNode;
import java.util.regex.*;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;

public class ExtractDateCVEfromReport {
	public static void main(String[] args) throws Exception {
		if (args.length == 0) {
			System.out.println("Pass an Malware Name as cmd line.");
			return;
		}
		SimpleDateFormat dateForm = new SimpleDateFormat("dd MMM, yyyy");
		for(String malware : args) {
			HashMap<String, Object> result = readCSV(malware);
			Date foundDate = (Date) result.get("DATE");
			Set<String> listCVETmp = new HashSet<String>((ArrayList<String>) result.get("CVE"));
			String[] listCVE = listCVETmp.toArray(new String[listCVETmp.size()]);
			
			// String date = findDate(sentence);
			// ArrayList<String> listCVE = findCVE(sentence);
			//
			System.out.println("Malware Name:    " + malware);
			System.out.println("Date Found:      " + dateForm.format(foundDate));
			System.out.println("CVE Exploited:   " + Arrays.toString(listCVE));
			System.out.println("----------------------------------------------------------------------");
		}
		

		System.exit(0);
	}

	private static HashMap<String, Object> readCSV(String malwareName) {
		Date finalDate = new Date();
		ArrayList<String> finalCVEList = new ArrayList<String>();
		try {
			Reader in = new FileReader("data/" + malwareName + ".csv");
			Iterable<CSVRecord> records = CSVFormat.EXCEL.withHeader().parse(in);
			
			for (CSVRecord record : records) {
//				String title = record.get("title");
				String body = record.get("body");

//				System.out.println("*******************************************");
				// System.out.println("Title : " + title);
				// System.out.println("===========================================");
				// System.out.println("Body : \n" + body);
				// System.out.println("===========================================");

				Date curDate = findDate(body);
				if (curDate != null && curDate.before(finalDate)) {
					finalDate = curDate;
				}
				// ArrayList<String> listCVE = findCVE(body);
				finalCVEList.addAll(findCVE(body));

//				System.out.println("[TEST]: Date: " + curDate + "||" + finalDate);
//				System.out.println(
//						"[TEST]: CVE: " + Arrays.toString(finalCVEList.toArray(new String[finalCVEList.size()])));
//				System.out.println("*******************************************");

				// BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
				// String s = br.readLine();
			}
		} catch (IOException e) {
			System.out.println("-----");
			e.printStackTrace();
			System.out.println("-----");
		}

		HashMap<String, Object> combination = new HashMap<String, Object>();
		combination.put("DATE", finalDate);
		combination.put("CVE", finalCVEList);
		return combination;
	}

	private static ArrayList<String> findCVE(String sentence) {
		ArrayList<String> result = new ArrayList<String>();
		String CVEform = "CVE-[0-9]{4}-[0-9]{4,6}";

		Pattern p = Pattern.compile(CVEform);
		Matcher matcher = p.matcher(sentence);

		while (matcher.find()) {
			result.add(matcher.group());
		}

		return result;
		// if(result.size()>0) {
		// return result.toArray(new String[result.size()]);
		// } else {
		// return null;
		// }
	}

	private static Date findDate(String sentence) {
		String Months = "Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|January|February|March|April|June|July|August|September|October|November|December";// |[0][1-9]|[1][0-2]";
		String Date = "([0-2][1-9]|3[0-1])(st|nd|rd|th)?";
		String Year = "\\d{4}|\\d{2}";
		String Seps = "[\\. \\-:/,]{1,2}";

		String format1 = "(" + Months + ")(" + Seps + ")(" + Date + ")(" + Seps + ")(" + Year + ")";

		Date foundDate = findOldestDate(format1, sentence, Date, Months, Year);

		return foundDate;
	}

	private static String findMatch(String pattern, String sentence) {
		Pattern pat = Pattern.compile(pattern);
		Matcher mtch = pat.matcher(sentence);
		if (mtch.find()) {
			return mtch.group();
		} else {
			return null;
		}
	}

	private static Date findOldestDate(String pattern, String sentence, String datePtrn, String mnthPtrn,
			String yearPtrn) {
		Pattern p = Pattern.compile(pattern);
		Matcher matcher = p.matcher(sentence);

		Date oldDate = null;
		SimpleDateFormat dateForm = null;

		while (matcher.find()) {
			String match = matcher.group();
			String temp = match;
//			System.out.println("[TEST]: Matched: " + match);
			String mMon = findMatch(mnthPtrn, temp);
			temp = temp.replace(mMon, "");
			String mDate = findMatch(datePtrn, temp);
			temp = temp.replace(mDate, "");
			mDate = findMatch("\\d{2}", mDate);
			String mYear = findMatch(yearPtrn, temp);

			dateForm = new SimpleDateFormat("dd-MMM-yyyy");
			try {
				Integer.parseInt(mMon);
				dateForm = new SimpleDateFormat("dd-MM-yyyy");
			} catch (NumberFormatException e) {
				// Do Nothing
			}

			try {
				Date curDate = dateForm.parse(mDate + "-" + mMon + "-" + mYear);
				if (oldDate == null) {
					oldDate = curDate;
				} else if (curDate.before(oldDate)) {
					oldDate = curDate;
				}
			} catch (ParseException e) {
				oldDate = null;
			}
		}
//		System.out.println("[]: " + oldDate);
		return oldDate;
	}
}
