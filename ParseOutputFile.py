import FamilyTree
from MalwareStructure import *


class ParseOutput:
    def __init__(self, inputfile=None, outputimage='None'):
        self.inputfile = inputfile
        self.outputimage = outputimage
        pass


    def ParseOutputFile(self, inputfile, outputimage):

        self.inputfile = inputfile
        self.outputimage = outputimage

        MalwareDict = {}

        allLines = []

        f = open(self.inputfile, 'r')

        while True:

            line = f.readline()
            allLines.append(line)
            if not line:
                break

            if 'ParentID' in line:
                parentid, PID = line.strip().split(' : ')

                line = f.readline()
                if 'MalwareName' in line:
                    malwarename, mname = line.strip().split(' : ')

                line = f.readline()
                if 'Target' in line:
                    try:
                        Target, target = line.strip().split(' : ')
                    except:
                        target = 'None'

                    while 'Tools' not in line:
                        line = f.readline()
                        print(line)

                    f.seek(f.tell() - len(line))

                line = f.readline()
                if 'Tools' in line:
                    try:
                        Tools, tools = line.strip().split(' : ')
                    except:
                        tools = 'None'

                    while 'NodeID' not in line:
                        line = f.readline()
                        # lastpos = f.tell()

                    f.seek(f.tell() - len(line))

                line = f.readline()
                if 'NodeID' in line:
                    nodeID, ID = line.strip().split(' : ')

                line = f.readline()
                if 'Level' in line:
                    Level, level = line.strip().split(' : ')

                line = f.readline()
                if 'DateFound' in line:
                    try:
                        DateFound, df = line.strip().split(' : ')
                    except:
                        df = 'None'

                line = f.readline()
                if 'ExploitedCVE' in line:
                    try:
                        ExploitedCVE, cve = line.strip().split(' : ')
                    except:
                        cve = 'None'

                MalwareDict[ID] = Malware(mname, target=target, tools=tools, date=df, cve=cve, id=ID, pid=PID,
                                          level=level)

        ft = FamilyTree.FamilyTree()
        ft.CreateTree(MalwareDict, self.outputimage)
